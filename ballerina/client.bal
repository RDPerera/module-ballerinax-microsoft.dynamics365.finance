// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl) returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # GetCustomersV3_FieldList_CrossCompany_GBSI_USSI
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getCustomersV3FieldListCrossCompanyGbsiUssi(map<string|string[]> headers = {}, *GetCustomersV3FieldListCrossCompanyGbsiUssiQueries queries) returns error? {
        string resourcePath = string `/CustomersV3`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # PostCustomersV3
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful response 
    remote isolated function postCustomersV3(json payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/CustomersV3`;
        http:Request request = new;
        request.setPayload(payload, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # GetCustomersV3_CrossCompany_Count
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getCustomersV3CrossCompanyCount(map<string|string[]> headers = {}, *GetCustomersV3CrossCompanyCountQueries queries) returns error? {
        string resourcePath = string `/CustomersV3/$count`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # UpdateCustomersV3
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful response 
    remote isolated function updateCustomersV3(json payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/CustomersV3(dataAreaId='usmf',CustomerAccount='PM-001')`;
        http:Request request = new;
        request.setPayload(payload, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # GetCustomerGroups_CrossCompany
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getCustomerGroupsCrossCompany(map<string|string[]> headers = {}, *GetCustomerGroupsCrossCompanyQueries queries) returns error? {
        string resourcePath = string `/CustomerGroups`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetCustomerInvoiceJournalHeader_CrossCompany
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getCustomerInvoiceJournalHeaderCrossCompany(map<string|string[]> headers = {}, *GetCustomerInvoiceJournalHeaderCrossCompanyQueries queries) returns error? {
        string resourcePath = string `/GeneralLedgerCustInvoiceJournalHeaders`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetCustomerInvoiceJournalLine_CrossCompany
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getCustomerInvoiceJournalLineCrossCompany(map<string|string[]> headers = {}, *GetCustomerInvoiceJournalLineCrossCompanyQueries queries) returns error? {
        string resourcePath = string `/GeneralLedgerCustInvoiceJournalLines`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetCustomerPaymentJournalHeaders_CrossCompany
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getCustomerPaymentJournalHeadersCrossCompany(map<string|string[]> headers = {}, *GetCustomerPaymentJournalHeadersCrossCompanyQueries queries) returns error? {
        string resourcePath = string `/CustomerPaymentJournalHeaders`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetCustomerPaymentJournalLines_CrossCompany
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getCustomerPaymentJournalLinesCrossCompany(map<string|string[]> headers = {}, *GetCustomerPaymentJournalLinesCrossCompanyQueries queries) returns error? {
        string resourcePath = string `/CustomerPaymentJournalLines`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetPaymentJournalLineSettledInvoices_CrossCompany
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getPaymentJournalLineSettledInvoicesCrossCompany(map<string|string[]> headers = {}, *GetPaymentJournalLineSettledInvoicesCrossCompanyQueries queries) returns error? {
        string resourcePath = string `/PaymentJournalLineSettledInvoices`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # ExchangeRates_RateType_01092023
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getExchangeRatesRateType01092023(map<string|string[]> headers = {}, *GetExchangeRatesRateType01092023Queries queries) returns error? {
        string resourcePath = string `/ExchangeRates`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetExpenseJournalHeaders_CrossCompany
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getExpenseJournalHeadersCrossCompany(map<string|string[]> headers = {}, *GetExpenseJournalHeadersCrossCompanyQueries queries) returns error? {
        string resourcePath = string `/ExpenseJournalHeaders`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetExpenseJournalLines_CrossCompany
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getExpenseJournalLinesCrossCompany(map<string|string[]> headers = {}, *GetExpenseJournalLinesCrossCompanyQueries queries) returns error? {
        string resourcePath = string `/ExpenseJournalLines`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetFinancialDimensionSets
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful response 
    remote isolated function getFinancialDimensionSets(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/FinancialDimensionSets`;
        return self.clientEp->get(resourcePath, headers);
    }

    # GetFinancialDimensionValues_RetailChannel
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getFinancialDimensionValuesRetailChannel(map<string|string[]> headers = {}, *GetFinancialDimensionValuesRetailChannelQueries queries) returns error? {
        string resourcePath = string `/FinancialDimensionValues`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetFreeTextInvoiceHeaders_CrossCompany
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getFreeTextInvoiceHeadersCrossCompany(map<string|string[]> headers = {}, *GetFreeTextInvoiceHeadersCrossCompanyQueries queries) returns error? {
        string resourcePath = string `/FreeTextInvoiceHeaders`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetFreeTextInvoiceLines_CrossCompany
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getFreeTextInvoiceLinesCrossCompany(map<string|string[]> headers = {}, *GetFreeTextInvoiceLinesCrossCompanyQueries queries) returns error? {
        string resourcePath = string `/FreeTextInvoiceLines`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetReleasedProducts_FieldList_CrossCompany_J00029
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getReleasedProductsFieldListCrossCompanyJ00029(map<string|string[]> headers = {}, *GetReleasedProductsFieldListCrossCompanyJ00029Queries queries) returns error? {
        string resourcePath = string `/ReleasedProductsV2`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetReleasedProducts_CrossCompany_Count
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getReleasedProductsCrossCompanyCount(map<string|string[]> headers = {}, *GetReleasedProductsCrossCompanyCountQueries queries) returns error? {
        string resourcePath = string `/ReleasedProductsV2/$count`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetVendorsV2_CrossCompany_All
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getVendorsV2CrossCompanyAll(map<string|string[]> headers = {}, *GetVendorsV2CrossCompanyAllQueries queries) returns error? {
        string resourcePath = string `/VendorsV2`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetVendorsV2_CrossCompany_Count
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getVendorsV2CrossCompanyCount(map<string|string[]> headers = {}, *GetVendorsV2CrossCompanyCountQueries queries) returns error? {
        string resourcePath = string `/VendorsV2/$count`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetVendorGroups_CrossCompany_All
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getVendorGroupsCrossCompanyAll(map<string|string[]> headers = {}, *GetVendorGroupsCrossCompanyAllQueries queries) returns error? {
        string resourcePath = string `/VendorGroups`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetVendorGroups_CrossCompany_Count
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful response 
    remote isolated function getVendorGroupsCrossCompanyCount(map<string|string[]> headers = {}, *GetVendorGroupsCrossCompanyCountQueries queries) returns error? {
        string resourcePath = string `/VendorGroups/$count`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # GetSystemUsers
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful response 
    remote isolated function getSystemUsers(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/SystemUsers`;
        return self.clientEp->get(resourcePath, headers);
    }

    # PostSystemUsers
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful response 
    remote isolated function postSystemUsers(json payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/SystemUsers`;
        http:Request request = new;
        request.setPayload(payload, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # GetSystemSecurityUserRoleAssociation
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful response 
    remote isolated function getSystemSecurityUserRoleAssociation(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/SecurityUserRoleAssociations`;
        return self.clientEp->get(resourcePath, headers);
    }

    # PostSystemSecurityUserRoleAssociation
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful response 
    remote isolated function postSystemSecurityUserRoleAssociation(json payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/SecurityUserRoleAssociations`;
        http:Request request = new;
        request.setPayload(payload, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Refresh Entities
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful response 
    remote isolated function refreshEntities(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/DataManagementDefinitionGroups/Microsoft.Dynamics.DataEntities.InitializeDataManagement`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # data
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful response 
    remote isolated function getData(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/data`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Metadata annotations
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful response 
    remote isolated function getMetadataAnnotations(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/$metadata`;
        return self.clientEp->get(resourcePath, headers);
    }
}
