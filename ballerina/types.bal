// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

public type VendorV2 record {
    string \@odata\.etag?;
    # Legal entity identifier
    string dataAreaId?;
    # Vendor account number
    string VendorAccount?;
    # Organization name
    string OrganizationName?;
    # Vendor group identifier
    string VendorGroupId?;
    # Country/region identifier
    string AddressCountryRegionId?;
    # Purchase currency code
    string PurchaseCurrencyCode?;
    # Whether the vendor is active
    boolean IsActive?;
};

public type VendorsV2Collection record {
    *ODataCollection;
    VendorV2[] value?;
};

# Represents the Queries record for the operation: getCustomersV3CrossCompanyCount
public type GetCustomersV3CrossCompanyCountQueries record {
    # OData filter query option
    @http:Query {name: "$filter"}
    string filter?;
    @http:Query {name: "cross-company"}
    string crossCompany?;
};

public type CustomerGroupsCollection record {
    *ODataCollection;
    CustomerGroup[] value?;
};

public type ExchangeRate record {
    string \@odata\.etag?;
    # From currency code
    string FromCurrencyCode?;
    # To currency code
    string ToCurrencyCode?;
    # Exchange rate value
    decimal ExchangeRateValue?;
    # Valid from date
    string ValidFromDate?;
    # Rate type identifier
    string RateTypeId?;
};

public type ODataCollection record {
    # OData context URL
    string \@odata\.context?;
    # Total count of entities
    int \@odata\.count?;
    record {}[] value?;
};

public type ReleasedProductsV2Collection record {
    *ODataCollection;
    ReleasedProductV2[] value?;
};

public type CustomerGroup record {
    string \@odata\.etag?;
    # Legal entity identifier
    string dataAreaId?;
    # Customer group identifier
    string CustomerGroupId?;
    # Customer group description
    string Description?;
    # Payment terms identifier
    string PaymentTermsId?;
};

# Represents the Queries record for the operation: getVendorsV2CrossCompanyCount
public type GetVendorsV2CrossCompanyCountQueries record {
    @http:Query {name: "cross-company"}
    string crossCompany?;
};

public type CustomerV3 record {
    string \@odata\.etag?;
    # Legal entity identifier
    string dataAreaId?;
    # Customer account number
    string CustomerAccount?;
    # Organization name
    string OrganizationName?;
    # Name alias
    string NameAlias?;
    # Customer group identifier
    string CustomerGroupId?;
    # Country/region identifier
    string AddressCountryRegionId?;
    # Sales currency code
    string SalesCurrencyCode?;
    # Person gender
    "Unknown"|"Male"|"Female" PersonGender?;
    # Customer credit limit
    decimal CreditLimit?;
    # Whether the customer is active
    boolean IsActive?;
};

# Represents the Queries record for the operation: getCustomerGroupsCrossCompany
public type GetCustomerGroupsCrossCompanyQueries record {
    @http:Query {name: "cross-company"}
    string crossCompany?;
};

public type ReleasedProductV2 record {
    string \@odata\.etag?;
    # Legal entity identifier
    string dataAreaId?;
    # Product number
    string ProductNumber?;
    # Product name
    string ProductName?;
    # Product description
    string ProductDescription?;
    # Product type
    int ProductType?;
    # Product subtype
    int ProductSubtype?;
    # Whether the product is active
    boolean IsActive?;
    # Base price of the product
    decimal BasePrice?;
    # Unit of measure
    string UnitOfMeasure?;
};

public type CustomersV3Collection record {
    *ODataCollection;
    CustomerV3[] value?;
};

# Represents the Queries record for the operation: getExchangeRatesRateType01092023
public type GetExchangeRatesRateType01092023Queries record {
    @http:Query {name: "$filter"}
    string filter?;
};

public type ExchangeRatesCollection record {
    *ODataCollection;
    ExchangeRate[] value?;
};

# Represents the Queries record for the operation: getReleasedProductsCrossCompanyCount
public type GetReleasedProductsCrossCompanyCountQueries record {
    @http:Query {name: "cross-company"}
    string crossCompany?;
};

public type SystemUsersCollection record {
    *ODataCollection;
    SystemUser[] value?;
};

public type inline_response_200_value record {
    string name?;
    string kind?;
    string url?;
};

# Represents the Queries record for the operation: getCustomersV3FieldListCrossCompanyGbsiUssi
public type GetCustomersV3FieldListCrossCompanyGbsiUssiQueries record {
    # Number of entities to skip
    @http:Query {name: "$skip"}
    int skip?;
    # Number of entities to return
    @http:Query {name: "$top"}
    int top?;
    # OData filter query option
    @http:Query {name: "$filter"}
    string filter?;
    # OData orderby query option
    @http:Query {name: "$orderby"}
    string orderby?;
    # Enable cross-company query
    @http:Query {name: "cross-company"}
    string crossCompany?;
    # OData select query option
    @http:Query {name: "$select"}
    string selectFields?;
};

# Represents the Queries record for the operation: getReleasedProductsFieldListCrossCompanyJ00029
public type GetReleasedProductsFieldListCrossCompanyJ00029Queries record {
    @http:Query {name: "$filter"}
    string filter?;
    @http:Query {name: "cross-company"}
    string crossCompany?;
    @http:Query {name: "$select"}
    string selectFields?;
};

public type SystemUser record {
    string \@odata\.etag?;
    # User identifier
    string UserId?;
    # User name
    string UserName?;
    # User email address
    string Email?;
    # Whether the user is active
    boolean IsActive?;
};

public type inline_response_200 record {
    string \@odata\.context?;
    inline_response_200_value[] value?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# Represents the Queries record for the operation: getVendorsV2CrossCompanyAll
public type GetVendorsV2CrossCompanyAllQueries record {
    @http:Query {name: "$skip"}
    int skip?;
    @http:Query {name: "$top"}
    int top?;
    @http:Query {name: "$filter"}
    string filter?;
    @http:Query {name: "cross-company"}
    string crossCompany?;
    @http:Query {name: "$select"}
    string selectFields?;
};
